#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css" />
#+OPTIONS: \n:t
#+OPTIONS: ^:nil
* 一些特殊 默认变量
** 缺省变量
   | 变量 | 英文名 | 说明     |
   |------+--------+----------|
   | $_   | $ARG   | 默认变量 |
   | @_   |        | 函数参数 |
** 正则中的变量
   $1 $2 .. 捕获变量
   | 变量 | 英文名              | 说明                                       |
   |------+---------------------+--------------------------------------------|
   | $&   | $MATCH              | 匹配的部分                                 |
   | $`   | $PREMATCH           | 匹配部分之前的内容                         |
   | $'   | $POSTMATCH          | 未匹配的部分                               |
   | $+   | $LAST_PAREN_MATCH   | 最后一个圆括号中匹配的部分                 |
   | $*   | $MULTILINE_MATCHING  | 多行匹配须将此值设成1                      |
   | @+   | @LAST_MATCH_END     | 保存当前匹配的最后成功子匹配的结尾的偏移量 |
   |      |                     | $+[0]是整个匹配的偏移量,$+[1]...           |
   | @-   | @LAST_MATCH_START   | 同上 开始偏移量                            |
   #+begin_src perl
 if("hello there, neighbor" =~ /\s(\w+),/){
     print $1;   # "there"
     print $&;   # "there,"
     print $`;   # "hello"
     print $';   # "neighbor"
 }
   #+end_src
** 输入输出的变量
   | 变量 | 英文名                        | 说明                                                        |
   |------+-------------------------------+-------------------------------------------------------------|
   | $.   | $INPUT_LINE_NUMBE             | 最近一次执行读操作的当前行数                                |
   | $/   | $INPUT_RECORD_SEPARATOR       | 输入记录分隔符,缺省是新行 chomp 取自变量"$/"                |
   | $,   | $OUTPUT_FIELD_SEPARATOR       | print 操作的输出域分隔符                                    |
   | $\   | $OUTPUT_RECORD_SEPARATOR      | print 操作的输出记录分隔符,通常用于省略换行符               |
   | $"   | $LIST_SEPARATOR               | 当数组转换成字符串时,元素缺省以空格分隔                     |
   | $^L  | $FORMAT_FORMFEED              | 当执行一个进纸动作时输出的字符.缺省是\f                     |
   | $:   | $FORMAT_LINE_BREAK_CHARACTERS    | 就是目前可以作为折行的字符集合.缺省值是\n(空白 换行 连字号) |
   | $^A  | $ACCUMULATOR                  | 格式化行的写收集器的当前值                                  |
** 错误变量
   | 变量 | 英文名             | 说明                                  |
   |------+--------------------+---------------------------------------|
   | $?   | $CHILD_ERROR       | 包含了最近一次执行的外部程序结束状态  |
   | $!   | $OS_ERROR,$ERRNO   | 包含了系统的错误.(错误码 或 错误信息) |
   | $\^E | $EXTENDED_OS_ERROR   | 在某些平台,返回扩展错误信息           |
   | $@   | $EVAL_ERROR        | 从上一个eval命令的Perl语法错误信息    |

** 系统变量
   | $ $   | $PROCESS_ID $PID          | 运行当前Perl进程的pid                           |
   | $<    | $REAL_USER_ID $UID        | 当前进程的实际用户标识符(uid)              |
   | $>    | $EFFECTIVE_USER_ID $EUID   | 当前进程的有效用户标识符                               |
   | $(    | $REAL_GROUP_ID $GID       | 当前进程的实际组标识符(gid)                            |
   | $)    | $EFFECTIVE_GROUP_ID $EGID   | 当前进程的有效组标识符                                 |
   | $0    | $REOGRAM_NAME             | 正在执行的Perl脚本的文件名称.                          |
   | $[    |                           | 数组中第一个元素的序号或字符串中第一个字符的序号.缺省是0 |
   | $]    | $PERL_VERSION             | 返回版本号,加上补丁级别除以1000                        |
   | $^D   | $DEBUGGING                | 调试标志的当前值                                       |
   | $^F   | $SYSTEM_FD_MAX            | 最大的系统文件描述符,通常是2                           |
   | $^I   | $INPLACE_EDIT             | 原地编辑扩展的当前值.可使用undef禁止原地编辑           |
   | $^M   |                           | $M的内容能用件紧急内存池,以便Perl                      |
   |       |                           | 出out-of-memory错误时使用.使用$M要求Perl进行特殊的编译 |
   | $^O   | $OSNAME                   | 编译Perl本身时的操作系统名称                           |
   | $^P   | $PERLDB                   | 是否打开调试                                           |
   | $^T   | $BASETIME                 | 当前脚本开始进行的时间,以秒为单位,从1970年开始         |
   | $^W   | $WARNING                  | 警告开关的当前值,真或假                                |
   | $^X   | $EXECUTABLE_NAME          | 二进制Perl执行文件的名称                               |
   | $ARGV |                           | 当从<>读入时的当前文件名                               |

** 其它
   | 变量  | 说明                                 |
   |-------+--------------------------------------|
   | @ARGV | 命令行参数                           |
   | $ARGV | 当前文件的文件名,代表标准输入<STDIN> |
   | @INC  | 寻找Perl脚本的地址表                 |
   | %INC  | 通过do或requir包含的文件名的目录     |

* 操作符
** DONE 结合性、优先级
   | 结合性   | 操作符                                 |
   |----------+----------------------------------------|
   | 左       | 括号；给定参数的列表操作符             |
   | 左       | ->                                     |
   |          | ++ --                                  |
   | 右       | **(乘幂运算)                           |
   | 右       | \ ! ~ + -                              |
   | 左       | ＝~ ！~                                |
   | 左       | * / % x                                |
   | 左       | + - . (双目操作符)                     |
   | 左       | << >>                                  |
   | 无连接性 | 具名的单目操作符(-X文件测试; rand)     |
   | 无连接性 | < <= > >= lt le gt ge ("不相等操作符") |
   | 无连接性 | == != <=> eq ne cmp ("相等"操作符)     |
   | 左       | &                                      |
   | 左       | ｜ ^                                   |
   | 左       | &&                                     |
   | 左       |                                        |
   | 无连接性 | .. ...(范围)                           |
   | 右       | ?:                                     |
   | 右       | \= += -= .=                            |
   | 左       | , =>                                   |
   | 无连接性 | 列表操作符(向右结和)                   |
   | 右       | not                                    |
   | 左       | and                                    |
   | 左       | or xor                                 |

** DONE ~~ 智能匹配
   | 范例                      | 匹配类型                           |
   |---------------------------+------------------------------------|
   | %a ~~ %b                  | 哈希的键是否一致                   |
   | %a ~~ @b  @a ~~ %b        | %a中的至少一个键在列表@b中         |
   | %a ~~ /Fred/ /fred/ ~~ %b | 至少有一个键匹配给定的模式         |
   | 'fred' ~~ %a              | 是否存在$a{fred}                   |
   | @a ~~ @b                  | 数组是否相同                       |
   | @a ~~ /fred/              | @a中至少有一个元素匹配模式         |
   | $name ~~ undef   $name    | $name 没有定义                     |
   | $name ~~ /fred/           | 模式匹配                           |
   | 123 ~~ '123.0'            | 数值和"numish"类型的字符串是否相等 |
   | ' Fred' ~~ ' fred'        | 字符串是否相同                     |
   | 123 ~~ 456                | 数值是否相等                       |

** 按位运算操作符
   | 表达式   | 意义                                                        |
   |----------+-------------------------------------------------------------|
   | 10 & 12  | 按位与 哪些位在两边同时为真(此例得8)                        |
   |          | print 'a'&'_'; #得到A                                       |
   | 10 ｜ 12 | 按位或 哪些位在任一边为真(此例得14)                         |
   |          | print 'A'  \vert ''; #得到a  设置文件格式O_CREAT \vert O_TRUNC   |
   | 10 ^ 12  | 按位异或 哪些位在任何一边为真 但不能两边都为真(此例得6)     |
   | 6 << 2   | 按位左移 将左边操作数向左移动右操作数位,低位以0补(此例得24) |
   | 25 >> 2  | 按位右移 将左操作数向右移动右操作数位,丢弃低位(此例得6)     |
   | ~10      | 按位取反 返回逐位反相之后的值(此例得0xfffffff5 32位)        |

** 字符串操作符
   . 将两个字符串连接到一起 eg.  "hello world"."\n"
   x 将字符串重复几次      eg.  "fred" x 3
   右操作数在使用前会先取整
   对列表同样可用  @array=(1,2,3,4)x2; #@array=(1,2,3,4,1,2,3,4)

** 逻辑操作符
   | 操作符 | 命名 | 说明 |
   |--------+------+------+
   | \!     | not  | 非   |
   | \vert\vert  | or   | 或   |
   | &&     | and  | 与   |
   |        | xor  | 异或 |
** DONE 比较操作符
   | 比较     | 数字 | 字符串 | 返回值               |
   |----------+------+--------+----------------------|
   | 相等     | ==   | eq     | 相等返回真           |
   | 不等     | ！=  | ne     | 不等返回真           |
   | 小于     | <    | lt     | 小于返回真           |
   | 大于     | >    | gt     | 大于返回真           |
   | 小于等于 | <=   | le     | 不小于返回真         |
   | 大于等于 | >=   | ge     | 不大于返回真         |
   | 比较     | <=>  | cmp    | 相等为0,大为1,小为-1 |

* 变量
** 基础知识
*** 数字
   未赋值的标量 undef 作为数字时为0
   0377 (oct)
   0xff (hex)
   0b11111111 (bin)    都表示255(dec)
   可以用 hex oct 转换为10进制
   sprintf 将10进制转换为2(%b) 8(%o) 16(%x)进制
   整数直接量允许插入_便于阅读(非十进制也可以)
   eg. 61_298_768

** here 文档
   here 文档定义一个字符串,它的结束符用紧接着<<的符号定义,
   这个符号可以用双引号或单引号括起来.同时它支持插值

   here 文档仅仅是引号的一种可替代的形式.
   在你可以使用单引号或者双引号的地方就可以使用here文档.
+ eg.
  #+begin_src perl
  my $price = 'right';
  #here docuemnts
  print <<EOF;
  The price is $price.
  EOF

  #+end_src
  结果将打印出: The price is right.
  #+begin_src perl
  use strict;
  my $someURL = 'http://www.perl.com';
  my $html = <<ENDHTML;
  <HTML>
  <BODY>
  <P><A HREF="$someURL">Perl Homepage</A></P>
  </BODY>
  </HTML>
  ENDHTML
  open (DATAFILE, ">data.file")||die "could not open 'data.file' $!";
  print DATAFILE $html;  #print to file
  close(DATAFILE);
  #+end_src
** 双引号内的\转义
   | 组合    | 意义                              |
   |---------+-----------------------------------|
   | \n      | 换行                              |
   | \r      | 回车                              |
   | \t      | 制表符                            |
   | \f      | 换页符                            |
   | \b      | 退格                              |
   | \a      | 系统响铃                          |
   | \e      | Esc                               |
   | \007    | oct 表示的ASCII值(响铃)           |
   | \x7f    | hex 表示的ASCII值(删除键代码)     |
   | \{2744} | hex unicode代码点(雪花）          |
   | \cC     | 控制符 Control                    |
   | \\      | 反斜线                            |
   | \       | 双引号                            |
   | \l      | 下个字母小写                      |
   | \L      | 后面所有字母小写直到\E            |
   | \u      | 下个字母大写                      |
   | \U      | 后面所有字母大写直到\E            |
   | \Q      | 把它到\E之间的非单词字符加上\转义 |
   | \E      | 作为\L \U \Q 的结束               |

* 列表与数组
** 基础知识
+ 列表直接量
  (1, 2, 3, 4)
  (1..5)
  (1.7..5.7)     同上(取整)
  (1, 2..5)
  (5..1)         空
+ qw 简写
  eg. qw(fred barney betty)
  或 qw() qw!! qw// qw## qw[] qw{} qw<> 等
+ 索引
  访问越界  返回undef
  为索引值超过数组尾端的元素赋值 数组会自动扩大 中间补充元素为undef
  $#   最大索引值
  负数索引值  从数组尾端往回计数(最后一个元素 索引值 -1)
+ print
  print @array;  打印列表 各元素之间没有空格
  print "@array"; 打印列表 各元素之间有空格
  print @array."\n" @array 打印元素个数
** 函数
+ pop(出) push(入) 对数组尾端进行操作
+ shift(出) unshift(入) 对数组头进行操作
+ splice 对数组中间元素   删除、添加
  splice array, offset, length, list

+ reverse  将列表倒序输出 不改变原来的顺序
+ sort     ASCII 码排序   也可以自定义排序方法
  #+begin_src perl
  #按字典方式排序
  @articles = sort @files;
  #实现同样的目的,但是使用了显式的排序函数
  @articles = sort{$a cmp $b} @files;
  #现在是大小写不敏感
  @articles = sort{uc($a) cmp uc($b)} @files;
  #现在是倒排序
  @articles = sort{$b cmp $a} @files;
  #按数字递增方式排序
  @articles = sort{$a <=> $b} @files;
  #按数字递减方式排序
  @articles = sort{$b <=> $a} @files;
  #现在使用内联函数按照值而不是关键字的方式排序哈希表 %aeg
  @eldest = sort{$age{$b} <=> $age{$a}} keys %age;
  #+end_src
+ map EXPR, list 对列表中的每个元素执行EXPR
  #+begin_src perl
  @numbers = (80, 101, 114, 108);
  @characters = map(chr $_, @numbers);

  #+end_src
+ split 将根据指定的模式拆分字符串
  my @fields = split /separator/, $string;
  默认以空白符分隔$_ 中的字符串
  #+begin_src perl
  my @fields = split /:/, "abc:def:g:h"; #得到("abc", "def", "g", "h")
  my @fields = split;   #my @fields = split /\s+/, $_

  #+end_src

+ join 与split 刚好相反
  my $result = join $glue, @pieces;

+ scalar 返回数组大小
  #+begin_src perl
  @names = (Jo, Pete, Bill, Zeke, All);
  print scalar(@names);   #6

  #+end_src

+ delete 清空该位置的元素,但不改变各元素的位置
  #+begin_src perl
  my @array = (0, 1, 2, 3, 4, 5, 6);
  delete $array[3];
  print jion(':', @array)."\n";  #0:1:2::4:5:6

  #+end_src
+ exists 判断该元素是否存在
  defined 判断该元素是否为undef
  元素被delete后 exitsts返回 false
  一个元素为undef exitsts返回 true

+ chop 每一个元素去掉最后一个字符
* 哈希 散列
** TODO 基础知识
   key 唯一 value 可以重复  key 只能是字符串
   可以直接赋值  %new_hash = %old_hash
   %ip_address = reverse %host_name;  #reverse 可以实现键值反转
   使用 => 时 key 的引号可以省略
   #+begin_src perl
my %last_name = {
    fred   => 'flintstone',
    dino   => undef,
    barney => 'rubble',
    betty  => 'rubble',
}
   #+end_src
   %ENV 哈希
** TODO 函数
+ keys values 函数 可以返回哈希键值列表
  my @k = keys %hash;
  my @v = values %hash;
+ each foreach
  whiel(($key, $value) = each %hash){ }
+ delete 删除指定的键及其相对应的值
* TODO 数据结构
+ [] 将一个列表当成一个标量
  #+BEGIN_SRC perl
  $wife{"Jacob"} = ["Leah", "Rachel", "Bilhah", "Zilpah"];
  or
  $wife{"Jacob"}[0] = "Leah";
  $wife{"Jacob"}[1] = "Rachel";
  #+END_SRC
+ {} 将哈希当成一个标量
  #+BEGIN_SRC perl
  $kids_of_wife{"Jacob"} = {
      "Leah" => ["Reuben", "Simeon", "Levi", "Judah", "Issachar", "Zebulun"],
      "Rachel" => ["Joseph", "Benjamin"],
      "Bilhah" => ["Dan", "Naphtali"],
      "Zilpah" => ["Gad", "Asher"],
  };
  or
  $kids_of_wife{"Jacob"}{"Leah"}[0] = "Reuben";
  $kids_of_wife{"Jacob"}{"Leah"}[1] = "Simeon";
  #+END_SRC

* 引用
  perl中有两种引用:硬引用和符号引用,因为符号引用被use strict禁止了,
  所以一般的引用都是指硬引用
  创建 使用反斜杠操作符可以创建引用.\相当于c语言中的&
  $numberref = \42;
  $messageref = \"hello ref";
  [...]{...}创建一个指向数组或hash的引用,
  它们创建一个自己内容的副本并返回指向它的一个引用,所以与\操作符不一样
  @array = [1,2,3,4];
  @copyhasref = {%hash};
+ 访问 $相当于c中的*,用于访问引用指向的值
  各种类型的引用
  | 引用     | 例子                                           |
  |----------+------------------------------------------------|
  | 标量引用 | $ra = \$ra; #指向标量的引用                    |
  |          | $$ra = 2; #标量引用解引用                      |
  |          | $ra = \1.6; #指向常量的引用                    |
  | 数组引用 | $rl = \@l; #指向已存在数组的引用               |
  |          | $rl = [1,2,3]; #指向匿名数组的引用             |
  |          | push(@$rl,"a"); #解引用                        |
  |          | print $rl->[3]; #$rl 指向的数组的第四个元素    |
  | 哈希引用 | $rh = \%h; #指向hash的引用                     |
  |          | $rh = {"laurel"=>"hardy"}; #指向匿名hash的引用 |
  |          | print keys(%$rh); #解引用                      |
  |          | $x = $rh->{"laurel"}; #取得单个元素的箭头符号  |
  |          | @slice = @$rh{"laurel","romeo"); #hash 片断    |
  | 代码引用 | $rs = \&foo;                                   |
  |          | $rs = sub {print "foo"};                       |
  |          | &$rs();                                        |
+ 通过ref函数返回引用的类型
  $ref = \[1,2,3,4];
  print "ref type ".ref($ref);
  该函数的返回值
  | SCALAR | 标量引用     |
  | ARRAY  | 数组引用     |
  | HASH   | hash引用     |
  | CODE   | 例程引用     |
  | GLOB   | Typeglob引用 |
  | IO     | 文件句柄引用 |
  | REF    | 指向另一个引用 |
  | LVALUE | 除了SCALAR ARRAY HASH之外的可分配的值 |

* TODO 子程序
* string 操作
** 基本操作
   $str =~ tr///;  对应替换
   (substr $str, , ) = "...";  替换 substr 截取子串
   my $pos = index $str, $subs; $subs在$str的位置
   my $pos = rindex $str, $subs; 从右边起第一次出现的$subs 在$str的位置

   split(match operand, target string, chunk-limit operand)
   match operand 为' '时，相当于/\s+/
   split(" ", "  a short   test   ")得到('a', 'short', 'test')
   使用 \s+ 会保留开始的空白字符
   如果没有设置regex运算元,则默认使用一个空格符
   regex为空,把目标字符串分割为字符
   chunk-limit operand 切分字符串的上限
   保留结尾的空白字符可以将chunk-limit设为－1
   当split中带捕获型括号的match运算元时返回的list中会多出些独立的元素,
   多出的元素不受分段上限的限制.如果含有多个捕获型括号会多出多个元素,
   未参与匹配的捕获型括号对应的元素为undef.

   chop       去掉字符串的最后一个字符
   chomp()    去掉字符串末尾的换行符
** 字符操作
   chr(0x05D0) 将代码点转换成对应的字符 reverse ord
   ord EXPR 返回EXPR第一个字符的代码点

** 大小写转换
   lc EXPR 转换为小写
   uc EXPR 转换为大写
   ucfirst EXPR 将首字母转换为大写
   lcfirst EXPR 将首字母转换为小写
* 文件目录及IO
** TODO glob
** DONE 文件测试
   | 文件测试操作符 | 意义                                                     |
   |----------------+----------------------------------------------------------|
   | -r             | 文件或目录,对目前(有效的)用户或组来说是可读的            |
   | -w             | 文件或目录,对目前(有效的)用户或组来说是可写的            |
   | -x             | 文件或目录,对目前(有效的)用户或组来说是可执行的          |
   | -o             | 文件或目录,由目前(有效的)用户拥有                        |
   | -R             | 文件或目录,对实际的用户或组来说是可读的                  |
   | -W             | 文件或目录,对实际的用户或组来说是可写的                  |
   | -X             | 文件或目录,对实际的用户或组来说是可执行的                |
   | -O             | 文件或目录,由实际的用户拥有                              |
   | -e             | 文件或目录,是存在的                                      |
   | -z             | 文件存在而且没有内容(对目录来说永远为假                  |
   | -s             | 文件或目录存在而且有内容(返回值是以字节为单位的文件大小) |
   | -f             | 是普通文件                                               |
   | -d             | 是目录                                                   |
   | -l             | 是符号链接                                               |
   | -S             | 是socket类型的文件                                       |
   | -p             | 是命名管道,也就是先入先出(fifo)队列                      |
   | -b             | 是块设备文件(比如某个可挂臷的磁盘)                       |
   | -c             | 是字符设备文件(比如某个I/O设备)                          |
   | -u             | 文件或目录设置了setuid位                                 |
   | -g             | 文件或目录设置了setgid位                                 |
   | -k             | 文件或目录设置了sticky位                                 |
   | -t             | 文件句柄是TTY设备(类似系统函数isatty()的测试;            |
   |                | 不能对文件名进行此测试)                                  |
   | -T             | 看起来像文本文件                                         |
   | -B             | 看起来像二进制文件                                       |
   | -M             | 最后一次被修改后至今的天数                               |
   | -A             | 最后一次被访问后至今的天数                               |
   | -C             | 最后一次文件节点编号(inode)被变更后至今的天数            |
** TODO 文件操作
+ rename 重命名
  rename 'old', 'new';  同时 , 也可以用 => 即 rename 'old' => 'new';
+ unlink 删除文件
  unlink + 文件列表: unlink 'slate', 'lava'; 或 qw//  或  glob
** stat lstat 获得文件的属性
   如果所传参数为符号链接,stat返回的是符号链接指向的对象的属性,
   而非符号链接本身的属性.如果想得到符号链接的属性则使用lstat函数
   Return a 13-elements list
   ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
   $atime,$mtime,$ctime,$blksize,$blocks) = stat($filename);
   | 0 dev      | device number of filesystem                      |
   | 1 ino      | inode number                                     |
   | 2 mode     | file mode  (type and permissions)                |
   | 3 nlink    | number of (hard) links to the file               |
   | 4 uid      | numeric user ID of file's owner                  |
   | 5 gid      | numeric group ID of file's owner                 |
   | 6 rdev     | the device identifier (special files only)       |
   | 7 size     | total size of file, in bytes                     |
   | 8 atime    | last access time in seconds since the epoch      |
   | 9 mtime    | last modify time in seconds since the epoch      |
   | 10 ctime   | inode change time in seconds since the epoch (*) |
   | 11 blksize | preferred block size for file system I/O         |
   | 12 blocks  | actual number of blocks allocated                |

** TODO 目录
   chdir 相当于 cd 改变当前工作目录
   chdir '/etc' or die "cannot chdir to /etc: $!";
** 文件句柄
   <STDIN>    行输入 操作
   $line = <DATA> 读取一行
   @array = <DATA> 读入数组
+ _ 虚拟文件句柄 (用上次查询过的文件信息来做当前测试)
  测试同一文件的多项属性
  if(-r $file and -w _)
  可以在不同的语句中使用
* 一些函数
** 日期函数
   | 函数            | 说明                                                          |
   |----------------+--------------------------------------------------------------|
   | time           | 返回1970年1月1日起经过无跳跃秒数                |
   |                | 可以用gmtime和localtime做进一步处理                          |
   | times          | 返回一个四个元素的列表,给出当前进程及其子进程用户和系统时间, |
   |                | 精确到秒                                                      |
   |                | ($uer, $system, $cuser, $csystem) = times                    |
   |                | 在标量上下文中,times 返回$user                               |
   | localtime EXPR | 把一个由time函数返回的时间转换成一个9个元素的列表,           |
   |                | 同时把该时间按照本地时区转换                                 |
   |                | ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =      |
   |                | localtime(time)                                              |
   |                | 取得当前时间:$time = locatime; print $time;                  |
   | gmtime EXPR    | 把一个由time 函数返回的时间转换成一个8个元素的列表,同时      |
   |                | 把该时间转化成标准的格林威治时区时间                         |

** 简单
   defined    判断是否为 undef 是返回假 否返回真

* 结构控制
** bool值
   如果是数字，0为假，其余为真
   如果是字符串，空('')为假，其余为真 ('0'与0为同一个标量,所以为假)
   非数字或字符串，先转换为数字或字符串再判断

** 控制结构
   if,  else,  elsif(不是elseif)
   unless
   必须加上{} (c中一句可以不加)
   foreach $.. ( ){}
+ 循环控制
  last 相当于break
  next 结束本次循环,继续下次
  redo 重新执行本次循环
  continue 在given-when 中使用

+ given-when 语句
  默认使用break语句,不用输入
  使用continue语句 继续测试 when条件
* TODO 进程管理
* perl books
  perl cookbook
  perl objects references
  黑豹书
