#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css" />
#+TITLE: 正则表达表（REGEX）
#+AUTHOR: fxdgrb@gmail.com
#+OPTIONS: \n:t
#+OPTIONS: ^:nil
*[[*零散知识][零散知识]]*
*[[*字符][字符]]*
    [[*元字符 字符组简记][元字符 字符组简记]]
    [[*字符缩略表示法][字符缩略表示法]]
    [[*POSIX 字符组][POSIX 字符组]]
    [[*Unicode][Unicode]]
    [[*转义及控制字符][转义及控制字符]]
*[[量词][量词]]*
*[[*锚点][锚点]]*
*[[*模式][模式]]*
*[[*条件判断][条件判断]]*
*[[*分组 捕获 环视][分组 捕获 环视]]*
*[[*引擎][引擎]]*
*[[*other-language][other language]]*


* 零散知识
   windows 下换行符为 \r\n
   chomp和\Z不能解决
   + 在字符组内部
     *永远不是元字符
     -通常是元字符(只有在开头的时候不是)
     \b在字符组内外的意义不一样
   POSIX规定   .不能匹配NUL(值为0的字符),大多数的脚本语言容许文本中的出现NUL(而且可以用.匹配)
   可以用 \C 匹配单个字节  但最好不用

   + 字符组的运算
     .NET提供字符组的“减法”运算  [a-z]-[aeiou]
     Java regex pachage 可以使用 &&  [a-z]&&[^aeiou]  [ [abc][xyz] ] [abc[xyz]] 等

   \Q\E  取消之间元字符的特殊含义

   + 多选结构(|)
     优先级很低  eg. this and | or that 等价于 (this and)|(or that)
     (this|that|)   空表达式在任何情况下都能匹配  相当于  (this|that)?
* 字符
** 元字符 字符组简记
   \R 匹配断行(\n \r\n)
   \v 垂直空白符
   \h 水平空白符
   \d 等价于[0-9],如果工具软件支持Unicode，能匹配所有的Unicode数字
   \D [^\d]
   \w [a-zA-Z0-9_] 某些工具软件不能匹配_ 而另一些则能支持当前locale中的所有数字和字符。
   如果支持Unicode 通常能表示所有数字和字符
   在java.util.regex和PCRE(也包括PHP)中 严格等价于[a-zA-Z0-9_]
   \s [ \f\n\r\t\v] 在支持Unicode的系统中，有时包含Unicode的换行控制字符U+0085，
   有时包含"空白"属性\p{Z}
   \S [^\s]
** 字符缩略表示法
   | \a | 警报　     | 通常对应ASCII中的<BEL>字符，八进制编码007                              |
   | \b | 退格　     | 通常对应ASCII中的<BS>字符，八进制编码010.                              |
   |    |            | (在许多流派中，\b只有在字符组内部才表示这样的意义，否则代表单词分界符) |
   | \e | Escape字符 | 　对应ASCII中的<ESC>字符，八进制编码033                                |
   | \f | 进纸符　   | 对应ASCII中的<FF>字符，八进制编码014                                   |
   | \n | 换行符　   | Unix DOS/Windows上对应ASCII的<LF>，八进制编码012.                      |
   |    |            | MacOS中对应ASCII的<CR>字符，十进制编码015.                             |
   |    |            | 在Java或任意一种.NET语言中，不论采用什么平台，都对应ASCII<LF>字符      |
   | \r | 回车　     | 对应ASCII的<CR>字符。在MacOS中对应ASCII的<LF>字符。                    |
   |    |            | 在Java或任意一种.NET语言中，不论采用什么平台，都对应ASCII<CR>字符      |
   | \t | 水平制表符 | 对应ASCII的<HT>字符，八进制编码011                                     |
   | \v | 垂直制表符 | 对应ASCII的<VT>字符，八进制编码013                                     |

** POSIX 字符组
   [:alnum:]  字母字符和数字字符
   [:alpha:]  字母
   [:blank:]  空格和制表符
   [:cntrl:]  控制字符
   [:digit:]  数字
   [:graph:]  非空字符(即空白字符 控制字符之外的字符)
   [:lower:]  小写字母
   [:print:]  类似[:graph:] 但是包含空白字符
   [:punct:]  标点符号
   [:space:]  所有的空白字符
   [:upper:]  大写字母
   [:xdigit:] 十六进制中容许出现的数字
** Unicode
*** Unicode 属性，字母表和区块
**** 属性
     \p{...} \P{...}
     基本的Unicode属性分类
     | 分类 | 等价表示及描述                                                      |
     |--------+----------------------------------------------------------------------------|
     | \p{L}  | \p{Letter}  字符                                                           |
     | \p{M}* | \p{Mark}    不能单独出现必须与其他基本字符一起出现(重音符号、包围框，等等) |
     | \p{Z}  | \p{Separator} 用于表示分隔，但本身不可见的字符(各种空白字符) |
     | \p{S}  | \p{Symbol} 各种图形符号(Dingdats)和字母符号                     |
     | \p{N}  | \p{Number} 任何数字字符                                              |
     | \p{P}  | \p{Punctutation} 标点字符                                                  |
     | \p{C}  | \p{Other}   匹配其他任何字符(很少用于正常字符)                             |
     基本的Unicode子属性
     | 属性   | 等价表示法及说明                                                                       |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Ll} | \p{Lowercase_Letter} 小写字母                                                          |
     | \p{Lu} | \p{Uppercase_Letter} 大写字母                                                          |
     | \p{Lt} | \p{Titlecase_Letter} 出现在单词开头的字母                                              |
     | \p{L&} | \p{Ll} \p{Lu} \p{Lt} 并集的简写                                                        |
     | \p{Lm} | \p{Modifier_Letter} 少数形似字母的，有特殊用途的字符                                   |
     | \p{Lo} | \p{Other_Letter} 没有大小写形式，也不属于修饰符的字母，包括希伯来语 阿拉伯语..中的字母 |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Mn} | \p{Non_Spacing_Mark} 用于修饰其它字符的字符如重音符 变音符 某些“元音记号”和语调标记  |
     | \p{Mc} | \p{Spacing_Combining_Mark} 会占据一定的宽度的修饰字符                                  |
     |        | (各种语言中的大多数“元音记号”孟加拉语，印度古哈拉地语。。。)                         |
     | \p{Me} | \p{Encolsing_Mark} 可以围住其他字符的标记如圆圈方框钻石型等                            |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Zs} | \p{Space_Separator} 各种空白字符 如空格符不间断空格以及各种固定宽度的空白字符          |
     | \p{Zl} | \p{Line_Separator} LINE SEPARATOR 字符(U+2028)                                         |
     | \p{Zp} | \p{Paragraph_Separator} PARAGRAPH SEPARATOR 字符(U+2029)                               |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Sm} | \p{Math_Symbol} 数学符号 + 除 表示分数的横线                                           |
     | \p{Sc} | \p{Currency_Symbol} 货币符号 $ ￥ €                                                    |
     | \p{Sk} | \p{Modifier_Symbol} 大多数版本中它表示组合字符，                                       |
     |        | 但是作为功能完整的字符，它们有自己的意义                                               |
     | \p{So} | \p{Other_Symbol} 各种印刷符号框图符号盲文符号以及非字母形式的中文字符等                |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Nd} | \p{Decimal_Digit_Number} 各种字母表中从0-9的数字(不包括中日韩文)                       |
     | \p{Nl} | \p{Letter_Number} 几乎所有的罗马数字                                                   |
     | \p{No} | \p{Other_Number} 作为加密符号和记号的数字，非阿拉伯数字的数字表示字符                  |
     |        | (不包括中文 日文 韩文中的数字)                                                         |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Pd} | \p{Dash_Punctuation} 各种格式的连字符和短划线                                          |
     | \p{Ps} | \p{Open_Punctuation} ( 上书名号 《 等                                                  |
     | \p{Pe} | \p{Close_Punctuantion} ) 下书名号 》 等                                                |
     | \p{Pi} | \p{Initial_Punctuation} « “ 〈 等                                                     |
     | \p{Pf} | \p{Final_Punctutaion} » ’ 〉等                                                        |
     | \p{Pc} | \p{Connector_Punctuation} 少数有特殊语法含义的标点，如_                                |
     | \p{Po} | \p{Other_Punctuation} 用于表示其他所有标点字符: !&. 等                                 |
     |--------+----------------------------------------------------------------------------------------|
     | \p{Cc} | \p{Control} ASCII和Latin-1编码中的控制字符(TAB LF CR 等)                               |
     | \p{Cf} | \p{Format} 用于表示格式的不可见字符                                                    |
     | \p{Co} | \p{Private_Use} 分配与私人用途的代码点(如公司的logo)                                   |
     | \p{Cn} | \p{Unassigned} 目前尚未分配字符的代码点                                                |

**** 区块
     \p{InTibetan} 从U+0f00 到 U+0fff的256个代码点
     区块可能含未赋值的代码点
     并不是和区块相关的所有字符都在区块内部
     区块通常包含不相关的字符
     属于横个字母表的字符可能同时包含于多个区块
*** Unicode 组合字符序列 \X
    #+BEGIN_SRC perl
    $reg = qr/\X/;
    # 缩略表示 \P{M}\p{M}* 它可以视为 .的扩展。它匹配一个基本字符(除\p{M}之外的任何字符)，
    # 之后可能有任意数目的组合字符(除\p{M}之外)
    # \X 与 . 的差别
    # 能够匹配结尾的组合字符
    # \X始终能匹配换行符和其他Unicode行终结符
    # 点号无论什么情况下都能匹配任何字符，而\X 不能匹配以组合字符开头的字符
    #+END_SRC


** 转义及控制字符
   八进制转义  \num         \015\012  表示ASCII的CR/LF 序列
   十六进制转义 \xnum \x{num} \unum \Unum
   \nbsp\nbsp perl只支持\x
   \nbsp\nbsp java支持 \xFF \uFFFF
   控制字符    \cchar      \cH 匹配ASCII中的退格符， \cJ 匹配ASCII中的换行符
   GNU Emacs的元序列为 ?^char  如  ?^H

* 量词
   匹配优先量词 * + ? {num, num}  尽可能多的匹配
   忽略优先量词 *?  /+?  ??  {num, num}?  尽可能少的匹配
   占有优先量词 *+  ++  ?+  {num, num}+  一旦匹配不允许回溯 类似固化分组 (java.util.regex  PCRE)

* 锚点
   \A 匹配字符串的绝对开头
   \z 匹配字符串的绝对结尾
   \Z 匹配字符串的结尾可以怱略换行符
   一般与^$相似
   在/m 模式下^$匹配行首行尾
   \G 上一次匹配的结束位置  一般在 /c 模式下使用
* 模式
+ /m 多行模式　　　　　　　 ^$可以字符串内部的位置　\A \Z 相当于普通的　^ $
+ /x 宽松排列和注释模式　　可以在表达式中加入空白符
+ /s 单行模式(跨行匹配)　　此模式下 .可以匹配\n
+ /i 不区分大小写
+ /e 修饰词把REPLACEMENT当作一个perl代码块，而不仅仅是一个替换的字串。
  执行这段代码后得出的结果当作替换字串使用。
  可以多次使用/e 多次求值
+ /g 全局模式
  | 匹配类型 | 尝试开始位置            | 匹配成功时的pos值    | 匹配失败是的pos设定 |
  | m/.../   | 字符串起始位置(忽略pos) | 重置为undef          | 重置为undef         |
  | m/.../g  | 字符串的pos位置         | 匹配结束位置的偏移值 | 重置为undef         |
  | m/.../gc | 字符串的pos位置         | 匹配结束位置的偏移值 | 不变                |
+ /o 只编译一次 针对模式中的变量代换
+ 字符解释方式 ASCII(/a) Unicode(/u) locale(/l)
+ /aa 只采用ASCII方式的大小写映射处理 (unicode编码大小写比较乱)
+ /gc 匹配失败不会重置目标字符串的pos 一般与\G一起使用  /c 离不开/g
  #+BEGIN_SRC perl
  while(not  $html =~ m/\G\z/gc){
      if    ($html =~ m/\G( <[^>]+>   )/xgc) {print "TAG: $1\n"           }
      elsif ($html =~ m/\G( &\w+;     )/xgc) {print "NAMED ENTITY: $1\n"  }
      elsif ($html =~ m/\G( &\#\d+;   )/xgc) {print "NUMERIC ENTITY: $1\n"}
      elsif ($html =~ m/\G( [^<>&\n]+ )/xgc) {print "TEXT: $1\n"          }
      elsif ($html =~ m/\G  \n         /xgc) {print "NEWLINE\n"           }
      elsif ($html =~ m/\G( .         )/xgc) {print "ILLEGAL CHAR: $1\n"  }
      else {
          die "$0: oops, this shouldn't happen!";
      }
  }

  #+END_SRC
+ 模式修饰符
  (?i)(?-i) 在中间启用模式   <B>(?i)very(?-i)</B>
  大多数的实现方式中作用范围只限于括号内部  python不支持
  <B>(?:(?i)very)</B>  <B>(?i:very)</B>
  类似有 x   s   m  模式
* 条件判断
  条件判断
  (?if then else)
* 分组 捕获 环视
  + 捕获型括号
    $str =~ m/some(regex)things/ # 标量环境下返回是否匹配  列表环境下返回捕获到的内容

  + 非捕获型括号
    只分组不捕获       (?:

  + 环视
    肯定顺序环视       (?=
    否定顺序环视       (?!
    肯定逆序环视       (?<=
    否定逆序环视       (?<!

  + 固化分组 (?>...)
    当匹配运行到此结构之后，那么此结构体中的所有备用状态都会被放弃。
    括号内的子表达式中未尝试过的备用状态都不存在了，所以回溯不能选择其中的状态。

  perl 和 python 限制逆序环视只能匹配固定长度的文本
  (?<!books?)   (?<!^\w+)   错误

  python php .net 支持命名捕获  (?P<Area>\d\d\d)  (?<Area>\d\d\d)

** <<ch9-1>> 在正则中内嵌代码
+ 动态正则结构 (??{perl code})
  #+BEGIN_SRC perl
    ^(\d+)(??{"X x { $1 }"})$  # 匹配 '3XXX' '12XXXXXXXXXXXX' 不能匹配'3X' '7XXXX'
  #+END_SRC
  匹配嵌套()
  #+BEGIN_SRC perl
  my $levelN;
  $levelN = qr/ (?> [^()]+ | \( (??{ $levelN } )\) )*  /x;
  if( $text =~ m/\b ( \w+ \( $levelN \) ) /x)
    print "found function call: $1";
  #+END_SRC
+ 内嵌代码结构 (?{arbitrary perl code})
  不需要用到返回值 更为通用,适合调试正则
  #+BEGIN_SRC perl
  "abcdefgh" =~ m{
    (?{print "Starting match at [$`|$']\n"})
    (?:d|e|f|g)
  }x;
  #+END_SRC
  结果是：
  starting match at [|abcdefgh]
  starting match at [a|bcdefgh]
  starting match at [ab|cdefgh]
  starting match at [abc|defgh]
* 引擎
   NFA DFA
   + DFA
     最左最长原则 不支持许多功能 没有回溯 文本主导
     速度与正则表达式无关
   + NFA 表达式主导 回溯
     速度与表达式直接相关

* TODO other-language
** java regex 中的 \
   java 中Pattern.compile(String str);
   str 并不是正则表达式，只是一个字符串，经过编译之后才是正真的表达式
   Pattern.compile("[\u2e80-\u9FFF]")
   经过编译 \u2e80 \u9FFF 会变为相应的字符，整个表达式变为类似 [a-z]这种形式
   Pattern.compile("[\\u2e80-\\u9FFF]")
   编译后 变为 [\u2e80-\u9fff] 这种形式
   两种形式都可以匹配成功
